#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('project:server');
var http = require('http');
const { default: axios } = require('axios');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3001');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
const io = require('socket.io')(server);

let rooms = {};
const addUser = (id, p_id) => {
    if (Object.keys(rooms).includes(p_id)) {
        if (!rooms[p_id].includes(id)) {
            rooms[p_id].push(id);
            return true;
        } else {
            return false;
        }
    } else {
        rooms[p_id] = [id];
        return true;
    }
};

io.on('connection', (socket) => {
    console.log('Connected: ' + socket.id, socket.handshake.query.id);
    if (!socket.handshake.query.id) socket.disconnect();

    axios
        .get(
            `http://localhost:3001/projects/myprojects/${socket.handshake.query.id}`
        )
        .then(({ data }) => {
            if (data.data) {
                data.data.forEach((p) => {
                    if (addUser(socket.handshake.query.id, p._id)) {
                        socket.join(p._id);
                        console.log(
                            socket.handshake.query.id,
                            'joined',
                            p.title
                        );
                    }
                });
            }
        })
        .catch((e) => console.log(e));

    socket.on('chats', async(payload) => {
        axios
            .post('http://localhost:3001/chats/newChat', payload)
            .then(({ data }) => {
                // console.log(data);
                socket.to(payload.project_id).emit('newchats', {
                    p_id: payload.project_id,
                    data: data.data,
                });
            })
            .catch((e) => {
                socket
                    .to(payload.project_id)
                    .emit('newchats', { error: 'Error adding task' });
            });
        console.log('chat =>', payload.fullname);
    });
});

server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
    debug('Listening on ' + bind);
}